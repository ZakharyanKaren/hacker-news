import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchNews } from './newsAPI';

interface Article {
    source: {
        id: string;
        name: string;
    },
    [key: string]: unknown;
}

export interface NewsState {
  value: Array<Article>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: NewsState = {
  value: [],
  status: 'idle',
};

export const getNewsAsync = createAsyncThunk(
  'news/fetchNews',
  async () => {
    const response = await fetchNews();
    // The value we return becomes the `fulfilled` action payload
    const data = response.articles;
    const processData = data.map((item: Article, i: number) => ({ key: i, index: i + 1, id: `${i+1}`, ...item, name: item.source.name }))
    return processData;
  }
);

export const newsSlice = createSlice({
  name: 'news',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setNews: (state, action: PayloadAction<NewsState['value']>) => {
        state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getNewsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getNewsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      })
      .addCase(getNewsAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { setNews } = newsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectNewsData = (state: RootState) => state.newsData;

export const newsItemSelector = (id?: string) => (state: RootState) => {
    const item = state.newsData.value.find(item => item.id === id);
    return item;
};

export default newsSlice.reducer;
